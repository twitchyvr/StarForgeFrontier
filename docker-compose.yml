version: '3.8'

services:
  # Main StarForgeFrontier application
  starforge:
    build:
      context: .
      target: production
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    volumes:
      # Persistent database storage
      - starforge_data:/app/data
      # Log files
      - starforge_logs:/app/logs
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - starforge_network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - starforge_network

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - starforge_logs:/var/log/nginx
    depends_on:
      - starforge
    restart: unless-stopped
    networks:
      - starforge_network

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - starforge_network

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - starforge_network

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - starforge_network

  # Backup service
  backup:
    image: alpine:latest
    volumes:
      - starforge_data:/data:ro
      - ./backups:/backups
    command: |
      sh -c "
        apk add --no-cache sqlite
        while true; do
          echo 'Creating backup...'
          sqlite3 /data/starforge.db '.backup /backups/starforge_backup_$(date +%Y%m%d_%H%M%S).db'
          find /backups -name '*.db' -mtime +7 -delete
          sleep 3600
        done
      "
    restart: unless-stopped
    networks:
      - starforge_network

volumes:
  starforge_data:
    driver: local
  starforge_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  starforge_network:
    driver: bridge